Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]
 
Solution (Tested in IntelliJ):

------------------------------------------------------------------
Answer
------------------------------------------------------------------


public class Main {

    public static TreeNode buildTreeInPost(int preEnd, int inStart, int inEnd, int[] inorder, int[] postorder) {
        if (preEnd < 0 || inStart > inEnd) return null;

        TreeNode root = new TreeNode(postorder[preEnd]);
        int inIndex = 0;        // index of root in postorder
        for (int i = inStart; i <= inEnd; i++) {
            if (inorder[i] == root.val) inIndex = i;
        }
        root.left = buildTreeInPost(preEnd - (inEnd - inIndex) - 1, inStart, inIndex - 1, inorder, postorder);
        root.right = buildTreeInPost(preEnd - 1, inIndex + 1, inEnd, inorder, postorder);
        return root;
    }

    public static void FindFullNodes(TreeNode root, int depth) {
        // do the traversal and print all the nodes which has left and right
        // child

        if (root != null & depth<2) {

            if (depth<1)   System.out.print(root.val + " ");

            if (root.left != null)
                System.out.print(root.left.val + " ");
            else System.out.print("null" + " ");
            if (root.right != null)
                System.out.print(root.right.val + " ");
            else System.out.print("null" + " ");

        }
    }

    public static void main(String[] args) {
        // write your code here
        // Instantiating the outer class
        // Animals classA = new Animals();
        // Accessing the display_Inner() method.
        // classA.display_Inner();

         int[] preorder = new int[] {3,9, 20,15, 7};
         int[] inorder = new int[]{9, 3, 15, 20, 7};
         int[] postorder = new int[]{9, 15, 7, 20, 3};

        System.out.println("inorder BST:");
        for (int i =0; i<inorder.length; i++){
            System.out.print(inorder[i]+ " " );
        }
        System.out.println("");
        System.out.println("post order BST:");
        for (int i =0; i<postorder.length; i++){
            System.out.print(postorder[i]+ " " );
        }
        System.out.println("");

        System.out.println("Solution to Leecode 106:");
        TreeNode output1 =  buildTreeInPost(postorder.length - 1, 0, inorder.length - 1, inorder, postorder);

        FindFullNodes(output1,0);
        System.out.println("");

    }


}

--------------------------------------------------
Results
--------------------------------------------------

inorder BST:
9 3 15 20 7 
post order BST:
9 15 7 20 3 
Solution to Leecode 106:
3 9 20 null null 15 7 

